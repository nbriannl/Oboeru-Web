{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["numLessons","Object","keys","lessonList","length","lessonNumbers","Array","map","x","App","props","handleRestartQuiz","_event","handleStartQuiz","state","incorrectQuestions","handleStartAllQuiz","wordIndicesParam","wordIndices","shuffled","shuffleArray","correctOptionIndex","Math","floor","random","isOpenEnded","currentWordIndex","getQuestionAndAnswers","japaneseAnswerOpenEnded","japaneseAnswerOpenEndedHiragana","setState","isInQuiz","questionsIndices","currentQnNum","numCorrect","previousQuestion","isCorrect","english","japanese","correctAnswer","correctAnswerHiragana","answeredQuestions","answerFormValue","lessonNum","array","i","j","temp","handleEndQuiz","undefined","handleLessonSelect","event","selectedLessonNum","parseInt","target","value","handleThemeSwitch","isBlueTheme","checked","handleModeSwitch","handleAnswerChange","questionIndex","questionWord","vocabulary","englishQuestion","questionBlank","japaneseAnswerString","japaneseAnswerStringHiragana","japanese_all_hiragana","preJapaneseParticle","preJapanese","partOfSpeech","includes","postJapanese","correctJapaneseOption","incorrectJapaneseOptions","getIncorrectOptions","indexQuestionWord","posListForQuestionWord","posList","indexInPosList","indexOf","optionIndices","randomIndex","getRandomInt","randomWord","push","index","indexToVocab","incorrectWord","min","max","ceil","handleOptionSelect","newNumCorrect","currQnNum","nextQnNum","currentAnsweredQuestions","japaneseAllHiragana","currentIncorrectQuestions","handleAnswerSubmit","nextWordIndex","nextJapaneseAnswerOpenEnded","nextJapaneseAnswerOpenEndedHiragana","preventDefault","themeColor","this","document","querySelector","setAttribute","content","numTotal","isQuizEnd","numWrong","restartButton","Row","className","onClick","Col","Button","block","variant","PreviousQuestionCard","QuestionCard","title","questions","answerContent","options","splice","MCQOptions","text","number","key","toString","Form","Group","controlId","Label","Control","as","onChange","Check","type","id","label","bg","Container","fluid","React","Component","NavBar","Navbar","expand","Brand","href","Card","Header","Body","Title","Text","bgStyle","PreviousQuestionCardCompact","Footer","Badge","ButtonGroup","vertical","OpenEndedAnswerForm","placeholder","SummaryTable","cards","question","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dea6e600.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Row,\n  Col,\n  Container,\n  Badge,\n  Navbar,\n  Card,\n  Button,\n  ButtonGroup,\n  Form\n} from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport vocabulary from \"./vocabulary.json\";\nimport posList from \"./poslist.json\";\nimport lessonList from \"./lessonlist.json\";\n\nconst numLessons = Object.keys(lessonList).length;\nconst lessonNumbers = [...Array(numLessons).keys()].map(x => x + 1);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInQuiz: false,\n      lessonNum: 1,\n      isBlueTheme: false, // checked false == Red theme\n      isOpenEnded: false\n    };\n  }\n\n  handleRestartQuiz = _event => {\n    this.handleStartQuiz(_event, this.state.incorrectQuestions);\n  };\n\n  handleStartAllQuiz = (_event, wordIndicesParam) => {\n    const wordIndices = wordIndicesParam || [...Array(1826).keys()];\n    const shuffled = this.shuffleArray(wordIndices);\n    const correctOptionIndex = Math.floor(Math.random() * 4);\n    if (this.state.isOpenEnded) {\n      const currentWordIndex = shuffled[0];\n      const {\n        japaneseAnswerOpenEnded,\n        japaneseAnswerOpenEndedHiragana\n      } = this.getQuestionAndAnswers(currentWordIndex);\n      this.setState({\n        isInQuiz: true,\n        questionsIndices: shuffled,\n        currentQnNum: 0,\n        numCorrect: 0,\n        previousQuestion: {\n          isCorrect: null,\n          english: null,\n          japanese: null\n        },\n        correctAnswer: japaneseAnswerOpenEnded,\n        correctAnswerHiragana: japaneseAnswerOpenEndedHiragana,\n        incorrectQuestions: [],\n        answeredQuestions: [],\n        answerFormValue: \"\"\n      });\n    } else {\n      this.setState({\n        isInQuiz: true,\n        questionsIndices: shuffled,\n        currentQnNum: 0,\n        numCorrect: 0,\n        previousQuestion: {\n          isCorrect: null,\n          english: null,\n          japanese: null\n        },\n        correctOptionIndex: correctOptionIndex,\n        incorrectQuestions: [],\n        answeredQuestions: []\n      });\n    }\n  };\n\n  handleStartQuiz = (_event, wordIndicesParam) => {\n    const wordIndices = wordIndicesParam || lessonList[this.state.lessonNum];\n    const shuffled = this.shuffleArray(wordIndices);\n    const correctOptionIndex = Math.floor(Math.random() * 4);\n    if (this.state.isOpenEnded) {\n      const currentWordIndex = shuffled[0];\n      const {\n        japaneseAnswerOpenEnded,\n        japaneseAnswerOpenEndedHiragana\n      } = this.getQuestionAndAnswers(currentWordIndex);\n      this.setState({\n        isInQuiz: true,\n        questionsIndices: shuffled,\n        currentQnNum: 0,\n        numCorrect: 0,\n        previousQuestion: {\n          isCorrect: null,\n          english: null,\n          japanese: null\n        },\n        correctAnswer: japaneseAnswerOpenEnded,\n        correctAnswerHiragana: japaneseAnswerOpenEndedHiragana,\n        incorrectQuestions: [],\n        answeredQuestions: [],\n        answerFormValue: \"\"\n      });\n    } else {\n      this.setState({\n        isInQuiz: true,\n        questionsIndices: shuffled,\n        currentQnNum: 0,\n        numCorrect: 0,\n        previousQuestion: {\n          isCorrect: null,\n          english: null,\n          japanese: null\n        },\n        correctOptionIndex: correctOptionIndex,\n        incorrectQuestions: [],\n        answeredQuestions: []\n      });\n    }\n  };\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  handleEndQuiz = () => {\n    this.setState({\n      isInQuiz: false,\n      questionsIndices: undefined,\n      currentQnNum: undefined,\n      previousQuestion: undefined,\n      correctOptionIndex: undefined,\n      incorrectQuestions: undefined,\n      answeredQuestions: undefined,\n      numCorrect: undefined\n    });\n  };\n\n  handleLessonSelect = event => {\n    const selectedLessonNum = parseInt(event.target.value);\n    this.setState({ lessonNum: selectedLessonNum });\n  };\n\n  handleThemeSwitch = event => {\n    this.setState({ isBlueTheme: event.target.checked });\n  };\n\n  handleModeSwitch = event => {\n    this.setState({ isOpenEnded: event.target.checked });\n  };\n\n  handleAnswerChange = event => {\n    this.setState({ answerFormValue: event.target.value });\n  };\n\n  getQuestionAndAnswers = questionIndex => {\n    const questionWord = vocabulary[questionIndex];\n    const englishQuestion = questionWord.english;\n    let questionBlank = \"(    ?    )\";\n    let japaneseAnswerString = `[${questionWord.japanese}]`;\n    let japaneseAnswerStringHiragana = `[${questionWord.japanese_all_hiragana}]`;\n    if (questionWord.preJapaneseParticle !== \"\") {\n      questionBlank = questionWord.preJapaneseParticle + \" \" + questionBlank;\n      japaneseAnswerString =\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerString;\n      japaneseAnswerStringHiragana =\n        questionWord.preJapaneseParticle + \" \" + japaneseAnswerStringHiragana;\n    }\n    if (questionWord.preJapanese !== \"\") {\n      questionBlank = questionWord.preJapanese + \" \" + questionBlank;\n      japaneseAnswerString =\n        questionWord.preJapanese + \" \" + japaneseAnswerString;\n      japaneseAnswerStringHiragana =\n        questionWord.preJapanese + \" \" + japaneseAnswerStringHiragana;\n    }\n    if (questionWord.partOfSpeech.includes(\"na-adj\")) {\n      questionBlank = questionBlank + \"[な]\";\n      japaneseAnswerString = japaneseAnswerString + \"[な]\";\n      japaneseAnswerStringHiragana = japaneseAnswerStringHiragana + \"[な]\";\n    }\n    if (questionWord.postJapanese !== \"\") {\n      questionBlank = questionBlank + \" \" + questionWord.postJapanese;\n      japaneseAnswerString =\n        japaneseAnswerString + \" \" + questionWord.postJapanese;\n      japaneseAnswerStringHiragana =\n        japaneseAnswerStringHiragana + \" \" + questionWord.postJapanese;\n    }\n    let correctJapaneseOption =\n      questionWord.japanese + \" [\" + questionWord.japanese_all_hiragana + \"]\";\n    const incorrectJapaneseOptions = this.getIncorrectOptions(\n      questionWord.partOfSpeech[0],\n      questionIndex\n    );\n    const japaneseAnswerOpenEnded = questionWord.japanese;\n    const japaneseAnswerOpenEndedHiragana = questionWord.japanese_all_hiragana;\n    return {\n      englishQuestion,\n      questionBlank,\n      japaneseAnswerString,\n      japaneseAnswerStringHiragana,\n      correctJapaneseOption,\n      incorrectJapaneseOptions,\n      japaneseAnswerOpenEnded,\n      japaneseAnswerOpenEndedHiragana\n    };\n  };\n\n  getIncorrectOptions = (partOfSpeech, indexQuestionWord) => {\n    const posListForQuestionWord = posList[partOfSpeech];\n    const indexInPosList = posListForQuestionWord.indexOf(indexQuestionWord);\n    let optionIndices = [];\n    while (optionIndices.length < 3) {\n      const randomIndex = this.getRandomInt(\n        0,\n        posListForQuestionWord.length - 1\n      );\n      const randomWord =\n        vocabulary[posListForQuestionWord[randomIndex]].japanese;\n      const questionWord =\n        vocabulary[posListForQuestionWord[indexInPosList]].japanese;\n      if (\n        randomIndex !== indexInPosList &&\n        !optionIndices.includes(randomIndex) &&\n        randomWord !== questionWord\n      ) {\n        optionIndices.push(randomIndex);\n      }\n    }\n    const incorrectOptions = optionIndices.map(index => {\n      const indexToVocab = posListForQuestionWord[index];\n      const incorrectWord = vocabulary[indexToVocab];\n      const incorrecOption =\n        incorrectWord.japanese +\n        \" [\" +\n        incorrectWord.japanese_all_hiragana +\n        \"]\";\n      return incorrecOption;\n    });\n    return incorrectOptions;\n  };\n\n  getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  handleOptionSelect = event => {\n    const isCorrect =\n      parseInt(event.target.value) === this.state.correctOptionIndex;\n    let newNumCorrect = this.state.numCorrect;\n    if (isCorrect) {\n      newNumCorrect = newNumCorrect + 1;\n    }\n\n    const currQnNum = this.state.currentQnNum;\n    const nextQnNum = this.state.currentQnNum + 1;\n\n    const currentWordIndex = this.state.questionsIndices[currQnNum];\n    const {\n      englishQuestion,\n      japaneseAnswerString,\n      japaneseAnswerStringHiragana\n    } = this.getQuestionAndAnswers(currentWordIndex);\n\n    const correctOptionIndex = Math.floor(Math.random() * 4);\n\n    const currentAnsweredQuestions = this.state.answeredQuestions;\n    currentAnsweredQuestions.push({\n      isCorrect,\n      english: englishQuestion,\n      japanese: japaneseAnswerString,\n      japaneseAllHiragana: japaneseAnswerStringHiragana\n    });\n\n    const currentIncorrectQuestions = this.state.incorrectQuestions;\n    if (!isCorrect) {\n      currentIncorrectQuestions.push(currentWordIndex);\n    }\n\n    this.setState({\n      currentQnNum: nextQnNum,\n      previousQuestion: {\n        isCorrect: isCorrect,\n        english: englishQuestion,\n        japanese: japaneseAnswerString,\n        japaneseAllHiragana: japaneseAnswerStringHiragana\n      },\n      numCorrect: newNumCorrect,\n      correctOptionIndex: correctOptionIndex,\n      answeredQuestions: currentAnsweredQuestions\n    });\n  };\n\n  handleAnswerSubmit = event => {\n    const isCorrect =\n      this.state.answerFormValue === this.state.correctAnswer ||\n      this.state.answerFormValue === this.state.correctAnswerHiragana;\n    let newNumCorrect = this.state.numCorrect;\n    if (isCorrect) {\n      newNumCorrect = newNumCorrect + 1;\n    }\n\n    const currQnNum = this.state.currentQnNum;\n    const nextQnNum = this.state.currentQnNum + 1;\n    const currentWordIndex = this.state.questionsIndices[currQnNum];\n    const nextWordIndex = this.state.questionsIndices[nextQnNum];\n    const {\n      englishQuestion,\n      japaneseAnswerString,\n      japaneseAnswerStringHiragana\n    } = this.getQuestionAndAnswers(currentWordIndex);\n\n    const numTotal = this.state.questionsIndices.length;\n    const isQuizEnd = nextQnNum >= numTotal;\n    let nextJapaneseAnswerOpenEnded = \"\";\n    let nextJapaneseAnswerOpenEndedHiragana = \"\";\n    if (!isQuizEnd) {\n      const {\n        japaneseAnswerOpenEnded,\n        japaneseAnswerOpenEndedHiragana\n      } = this.getQuestionAndAnswers(nextWordIndex);\n      nextJapaneseAnswerOpenEnded = japaneseAnswerOpenEnded;\n      nextJapaneseAnswerOpenEndedHiragana = japaneseAnswerOpenEndedHiragana;\n    }\n\n    const currentAnsweredQuestions = this.state.answeredQuestions;\n    currentAnsweredQuestions.push({\n      isCorrect,\n      english: englishQuestion,\n      japanese: japaneseAnswerString,\n      japaneseAllHiragana: japaneseAnswerStringHiragana\n    });\n\n    const currentIncorrectQuestions = this.state.incorrectQuestions;\n    if (!isCorrect) {\n      currentIncorrectQuestions.push(currentWordIndex);\n    }\n\n    this.setState({\n      currentQnNum: nextQnNum,\n      previousQuestion: {\n        isCorrect: isCorrect,\n        english: englishQuestion,\n        japanese: japaneseAnswerString,\n        japaneseAllHiragana: japaneseAnswerStringHiragana\n      },\n      numCorrect: newNumCorrect,\n      correctAnswer: nextJapaneseAnswerOpenEnded,\n      correctAnswerHiragana: nextJapaneseAnswerOpenEndedHiragana,\n      answeredQuestions: currentAnsweredQuestions,\n      answerFormValue: \"\"\n    });\n\n    event.preventDefault();\n  };\n\n  render() {\n    const themeColor = this.state.isBlueTheme ? \"primary\" : \"danger\";\n    const redColor = \"#DC3545\";\n    const blueColor = \"#007BFF\";\n    if (this.state.isBlueTheme) {\n      document\n        .querySelector('meta[name=\"theme-color\"]')\n        .setAttribute(\"content\", blueColor);\n    } else {\n      document\n        .querySelector('meta[name=\"theme-color\"]')\n        .setAttribute(\"content\", redColor);\n    }\n\n    const isInQuiz = this.state.isInQuiz;\n    const isOpenEnded = this.state.isOpenEnded;\n    let content;\n    if (isInQuiz) {\n      const numTotal = this.state.questionsIndices.length;\n      const currentQnNum = this.state.currentQnNum; // 0-index\n      const isQuizEnd = currentQnNum >= numTotal;\n      const numCorrect = this.state.numCorrect;\n      const numWrong = currentQnNum - numCorrect;\n      if (isQuizEnd) {\n        let restartButton = \"\";\n        if (numWrong !== 0) {\n          restartButton = (\n            <Row className=\"restart-button\" onClick={this.handleRestartQuiz}>\n              <Col>\n                <Button block variant={`outline-${themeColor}`}>\n                  Test Incorrect Questions\n                </Button>\n              </Col>\n            </Row>\n          );\n        }\n        content = (\n          <>\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\n              <Col>\n                <Button block variant={`outline-${themeColor}`}>\n                  Quit\n                </Button>\n              </Col>\n            </Row>\n            <Row className=\"previous-question-card\">\n              <Col>\n                <PreviousQuestionCard\n                  previousQuestion={this.state.previousQuestion}\n                />\n              </Col>\n            </Row>\n            <Row className=\"question-card\">\n              <Col>\n                <QuestionCard\n                  title=\"Quiz Over\"\n                  currentQnNum={currentQnNum}\n                  numTotal={numTotal}\n                  numCorrect={numCorrect}\n                  numWrong={numWrong}\n                />\n              </Col>\n            </Row>\n            {restartButton}\n            <Row className=\"question-card\">\n              <Col>\n                <SummaryTable questions={this.state.answeredQuestions} />\n              </Col>\n            </Row>\n          </>\n        );\n      } else {\n        const currentWordIndex = this.state.questionsIndices[currentQnNum];\n        const { englishQuestion, questionBlank } = this.getQuestionAndAnswers(\n          currentWordIndex\n        );\n        let answerContent = \"\";\n        if (isOpenEnded) {\n          answerContent = (\n            <>\n              <OpenEndedAnswerForm\n                themeColor={themeColor}\n                value={this.state.answerFormValue}\n                handleAnswerSubmit={this.handleAnswerSubmit}\n                handleAnswerChange={this.handleAnswerChange}\n              />\n            </>\n          );\n        } else {\n          const currentWordIndex = this.state.questionsIndices[currentQnNum];\n          const {\n            correctJapaneseOption,\n            incorrectJapaneseOptions\n          } = this.getQuestionAndAnswers(currentWordIndex);\n          const correctOptionIndex = this.state.correctOptionIndex;\n          let options = incorrectJapaneseOptions;\n          options.splice(correctOptionIndex, 0, correctJapaneseOption);\n          answerContent = (\n            <>\n              <MCQOptions\n                themeColor={themeColor}\n                handleOptionSelect={this.handleOptionSelect}\n                options={options}\n              />\n            </>\n          );\n        }\n        content = (\n          <>\n            <Row className=\"quit-button\" onClick={this.handleEndQuiz}>\n              <Col>\n                <Button block variant={`outline-${themeColor}`}>\n                  Quit\n                </Button>\n              </Col>\n            </Row>\n            <Row className=\"previous-question-card\">\n              <Col>\n                <PreviousQuestionCard\n                  previousQuestion={this.state.previousQuestion}\n                />\n              </Col>\n            </Row>\n            <Row className=\"question-card\">\n              <Col>\n                <QuestionCard\n                  title={englishQuestion}\n                  text={questionBlank}\n                  currentQnNum={currentQnNum + 1}\n                  numTotal={numTotal}\n                  numCorrect={numCorrect}\n                  numWrong={numWrong}\n                />\n              </Col>\n            </Row>\n            <Row className=\"answer-buttons\">\n              <Col>{answerContent}</Col>\n            </Row>\n          </>\n        );\n      }\n    } else {\n      // Main screen\n      const options = lessonNumbers.map(number => {\n        return (\n          <option key={number.toString()} value={number}>\n            {number}\n          </option>\n        );\n      });\n      content = (\n        <>\n          <Row>\n            <Col>\n              <Button\n                block\n                variant={`outline-${themeColor}`}\n                onClick={this.handleStartQuiz}\n              >\n                Start\n              </Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group\n                className=\"text-center\"\n                controlId=\"exampleForm.ControlSelect1\"\n              >\n                <Form.Label>Select Lesson</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  value={this.state.lessonNum}\n                  onChange={this.handleLessonSelect}\n                >\n                  {options}\n                </Form.Control>\n                <br></br>\n                <Form.Check\n                  type=\"switch\"\n                  id=\"mode-switch\"\n                  label=\"MCQ/Open Ended\"\n                  checked={this.state.isOpenEnded}\n                  onChange={this.handleModeSwitch}\n                />\n                <br></br>\n                <Form.Check\n                  type=\"switch\"\n                  id=\"theme-switch\"\n                  label=\"Red/Blue\"\n                  checked={this.state.isBlueTheme}\n                  onChange={this.handleThemeSwitch}\n                />\n              </Form.Group>\n              <h6 className=\"text-center\">New features!</h6>\n              <ul className=\"list-unstyled text-center\">\n                <li>App is now PWA</li>\n                <li>Redo incorrect questions</li>\n                <li>Updated some incorrect vocabulary entries 30/3/2020</li>\n              </ul>\n            </Col>\n          </Row>\n          <h4>Experimental</h4>\n          <Row>\n            <Col>\n              <Button\n                block\n                variant={`outline-${themeColor}`}\n                onClick={this.handleStartAllQuiz}\n              >\n                Start All\n              </Button>\n            </Col>\n          </Row>\n        </>\n      );\n    }\n    return (\n      <div>\n        <NavBar bg={themeColor} />\n        <Container className=\"content\" fluid>\n          {content}\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst NavBar = props => {\n  return (\n    <Navbar bg={props.bg} variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Oboeru</Navbar.Brand>\n    </Navbar>\n  );\n};\n\nfunction PreviousQuestionCard(props) {\n  const {\n    isCorrect,\n    english,\n    japanese,\n    japaneseAllHiragana\n  } = props.previousQuestion;\n  if (isCorrect === null) {\n    return (\n      <Card bg=\"light\" text=\"black\" className=\"text-center\">\n        <Card.Header>Previous Question</Card.Header>\n        <Card.Body>\n          <Card.Title></Card.Title>\n          <Card.Text></Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n  const bgStyle = isCorrect ? \"success\" : \"danger\";\n  return (\n    <Card bg={bgStyle} text=\"white\" className=\"text-center\">\n      <Card.Header>Previous Question</Card.Header>\n      <Card.Body>\n        <Card.Title>{english}</Card.Title>\n        <Card.Text>\n          {japanese}\n          <br></br>\n          {japaneseAllHiragana}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction PreviousQuestionCardCompact(props) {\n  const {\n    isCorrect,\n    english,\n    japanese,\n    japaneseAllHiragana\n  } = props.previousQuestion;\n  const bgStyle = isCorrect ? \"success\" : \"danger\";\n  return (\n    <Card bg={bgStyle} text=\"white\" className=\"text-center\">\n      <Card.Body>\n        <Card.Title>{english}</Card.Title>\n        <Card.Text>\n          {japanese}\n          <br></br>\n          {japaneseAllHiragana}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction QuestionCard(props) {\n  return (\n    <Card className=\"text-center\">\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Text>{props.text}</Card.Text>\n      </Card.Body>\n      <Card.Footer>\n        Q <Badge variant=\"secondary\">{props.currentQnNum}</Badge> out of{\" \"}\n        <Badge variant=\"secondary\">{props.numTotal}</Badge>{\" \"}\n        <i className=\"fa fa-check\"></i>{\" \"}\n        <Badge variant=\"success\">{props.numCorrect}</Badge>{\" \"}\n        <i className=\"fa fa-times\"></i>{\" \"}\n        <Badge variant=\"danger\">{props.numWrong}</Badge>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nfunction MCQOptions(props) {\n  const themeColor = props.themeColor;\n  return (\n    <ButtonGroup vertical className=\"special\">\n      <Button\n        value={0}\n        variant={`outline-${themeColor}`}\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[0]}\n      </Button>\n      <Button\n        value={1}\n        variant={`outline-${themeColor}`}\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[1]}\n      </Button>\n      <Button\n        value={2}\n        variant={`outline-${themeColor}`}\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[2]}\n      </Button>\n      <Button\n        value={3}\n        variant={`outline-${themeColor}`}\n        onClick={props.handleOptionSelect}\n      >\n        {props.options[3]}\n      </Button>\n    </ButtonGroup>\n  );\n}\n\nconst OpenEndedAnswerForm = props => {\n  return (\n    <>\n      {/* <form onSubmit={props.handleAnswerSubmit}>\n        <label>\n          <input\n            type=\"text\"\n            value={props.value}\n            onChange={props.handleAnswerChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form> */}\n      <Form>\n        <Form.Group controlId=\"formAnswer\">\n          <Form.Label>Answer</Form.Label>\n          <Form.Control\n            type=\"answer\"\n            placeholder=\"Enter answer here\"\n            value={props.value}\n            onChange={props.handleAnswerChange}\n          />\n          <Form.Text className=\"text-muted\">\n            If your answer includes kanji, you must type exactly the same as the\n            textbook's entry.\n          </Form.Text>\n        </Form.Group>\n        <Button\n          variant={props.themeColor}\n          type=\"submit\"\n          onClick={props.handleAnswerSubmit}\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nconst SummaryTable = props => {\n  const cards = props.questions.map((question, index) => {\n    return (\n      <PreviousQuestionCardCompact key={index} previousQuestion={question} />\n    );\n  });\n  return (\n    <>\n      <h3 className=\"text-center\">Summary</h3>\n      {cards}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}